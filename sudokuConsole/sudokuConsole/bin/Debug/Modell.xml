<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Modell</name>
    </assembly>
    <members>
        <member name="T:Modell.Fitness">
            <summary>
            diese muss auch andern. Wir haben in jeder Chromosom alle Zahle von 1 bis 9, deshalb seines Fitness
            ist immer 9. Interessant für uns ist das Fitness von die Säule und sub matrix
            </summary>
        </member>
        <member name="M:Modell.Fitness.fitnessSaule(System.Int32,System.String[])">
            <summary>
            Ich benutze ein Array mit Booleans, wenn cr einen nummer hat, dann werde es ein 1 in dieser Position geben
            hier das maximal fitness ist 9 (hat die 9 nummer)
            </summary>
            <param name="k">Index Spalte in Sudoku Repräsentation</param>
            <param name="sud">Sudoku Repräsentation</param>
            <returns>Fitness diese Spalte</returns>
        </member>
        <member name="M:Modell.Fitness.fitnessSubMat(System.String[],System.Int32,System.Int32)">
            <summary>
            Ich benutze ein Array mit Booleans, wenn cr einen nummer hat, dann werde es ein 1 in dieser Position geben
            hier das maximal fitness ist 9 (hat die 9 nummer)
            </summary>
            <param name="sud">Sudoku Repräsentation</param>
            <param name="i">Index sub matrix in Sudoku Repräsentation</param>
            <param name="j">Index sub matrix in Sudoku Repräsentation</param>
            <returns>Fitness diese sub matrix</returns>
        </member>
        <member name="T:Modell.Sudoku">
            <summary>
            In diesem Class haben wir die Wichtige Information fur ein Sudoku, seine Werte, Fitness usw
            </summary>
        </member>
        <member name="F:Modell.Sudoku.listSudoku">
            <summary>
            Sudoku Repräsentation als List von Integers
            </summary>
        </member>
        <member name="F:Modell.Sudoku.sudokuStr">
            <summary>
            Sudoku Repräsentation als Array von Strings "viel effizienter"
            </summary>
        </member>
        <member name="F:Modell.Sudoku.fitness">
            <summary>
            Total Fitness dieses Sudokus
            </summary>
        </member>
        <member name="F:Modell.Sudoku.fitTotChr">
            <summary>
            Total Fitness aller Zeile (oder Chromosom)
            </summary>
        </member>
        <member name="F:Modell.Sudoku.fitTotSub">
            <summary>
            Total fitness aller Submatrix
            </summary>
        </member>
        <member name="F:Modell.Sudoku.fitnessChrom">
            <summary>
            Total fitness jedes Zeile
            </summary>
        </member>
        <member name="F:Modell.Sudoku.fitnessSubMat">
            <summary>
            Total fitness jedes Submatrix
            </summary>
        </member>
        <member name="F:Modell.Sudoku.gluckRadSektorGross">
            <summary>
            Gross des Sektors dieses Individuum (es benutzt wird in gluckRadswahl)
            </summary>
        </member>
        <member name="F:Modell.Sudoku.generation">
            <summary>
            um zu wissen, in welche generation erschaft wurde
            </summary>
        </member>
        <member name="M:Modell.Sudoku.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:Modell.Sudoku.#ctor(System.String[])">
            <summary>
            Constructor, um ein Sudoku zu klonen
            </summary>
            <param name="s">Sudoku Repräsentation als Array von Strings</param>
        </member>
        <member name="M:Modell.Sudoku.setStr(System.String[])">
            <summary>
            um ein Sudoku zu aktualisieren
            </summary>
            <param name="s">Sudoku Repräsentation als Array von Strings</param>
        </member>
        <member name="M:Modell.Sudoku.setList(System.Int32[0:,0:])">
            <summary>
            nicht benutzt, Repräsentation als Liste ist nicht effizient
            </summary>
            <param name="mat"></param>
        </member>
        <member name="M:Modell.Sudoku.setChromStr(System.Int32,System.String)">
            <summary>
            um ein der Zeile zu aktualisieren, es ist notwendig für Mutationen
            </summary>
            <param name="i">Index in array von integers</param>
            <param name="a">Neue chromosom</param>
        </member>
        <member name="M:Modell.Sudoku.sudToString">
            <summary>
            Um Ergebnisse zu zeigen
            </summary>
            <returns>String Repräsentation des Sudokus in einem Schonen Format</returns>
        </member>
        <member name="T:Modell.Natur">
            <summary>
            Class mit Haupt Methoden für Mutation, Crossover und Selektion
            </summary>
        </member>
        <member name="F:Modell.Natur.matFest">
            <summary>
            Matrix mit der Eingabe, es benutzt wird, um zu wissen, welche werte feste sind
            </summary>
        </member>
        <member name="F:Modell.Natur.populationTotalFitnes">
            <summary>
            Fitness total der Population, für Glückradswahl Selektion
            </summary>
        </member>
        <member name="M:Modell.Natur.populationTotalFitnessRechnen(System.Collections.Generic.List{Modell.Sudoku})">
            <summary>
            Es rechnet die Total Fitnes eine Population
            </summary>
            <param name="population">Liste von sudokus</param>
        </member>
        <member name="M:Modell.Natur.gluckRadSektorGrossRechnen(System.Collections.Generic.List{Modell.Sudoku})">
            <summary>
            Für jedes Sudoku in eine Liste rechnet es den Sektor Gröss
            </summary>
            <param name="population">Liste von sudoku</param>
        </member>
        <member name="M:Modell.Natur.RouletteSelektion(System.Collections.Generic.List{Modell.Sudoku})">
            <summary>
            Es wählt ein Individuum mit der Glückradswahl Methode
            </summary>
            <param name="population">Liste von sudokus</param>
            <returns>Index in Liste</returns>
        </member>
        <member name="M:Modell.Natur.turnierSelektion(System.Int32,System.Collections.Generic.List{Modell.Sudoku})">
            <summary>
            Deterministische turnier Selektion
            </summary>
            <param name="nummerTeilnehmer">Anzahl Teilnehmer in Turnier</param>
            <param name="population">Liste von sudokus</param>
            <returns>Index in Liste</returns>
        </member>
        <member name="M:Modell.Natur.randomPosLoeschenElite(System.Int32,System.Int32)">
            <summary>
            Gebt ein random Position in eine population, zwischen ein Rang
            </summary>
            <param name="elite">Untere Grenze</param>
            <param name="grossPopulation">Gross Liste sudokus</param>
            <returns>Random Index</returns>
        </member>
        <member name="M:Modell.Natur.randomPosPopulation(System.Int32)">
            <summary>
            Gebt ein random Position in Eine Population
            </summary>
            <param name="grossPopulation">Gross Liste sudokus</param>
            <returns></returns>
        </member>
        <member name="M:Modell.Natur.randomZahl(System.Int32,System.Int32)">
            <summary>
            Gebt ein Random Wert
            </summary>
            <param name="gering">Untere Grenze</param>
            <param name="hoch">Obere Grenze</param>
            <returns>Random Zahl</returns>
        </member>
        <member name="M:Modell.Natur.nachstePos(System.Int32)">
            <summary>
            Round robin für die Positionen in den Chromosomen
            </summary>
            <param name="p">Aktuelle Position</param>
            <returns></returns>
        </member>
        <member name="M:Modell.Natur.fuellenChromosomRand(System.String)">
            <summary>
            Es fuellt ein chromosom nach dem Zufallsprinzip mit alle die andere Zahlen, damit es alle Zahle 
            von 1 bis 9 hat
            </summary>
            <param name="cr">Zeile eines Sudokus mit Leere Positionen in 0</param>
            <returns>Neue Zeile mit den 9 Werte</returns>
        </member>
        <member name="M:Modell.Natur.mutationSwap(System.Int32,System.String)">
            <summary>
            swap 2 Random nicht Feste Werte
            </summary>
            <param name="i">Position Zeile (um in Feste Matrix zu sehen)</param>
            <param name="cr">Aktuelle Zeile</param>
            <returns>Neue Zeile</returns>
        </member>
        <member name="M:Modell.Natur.istSchonInSaule(System.Int32,System.Char)">
            <summary>
            sucht ob ein Spalte hat ein Wert als Feste
            </summary>
            <param name="sau">Index Spalte in Sudoku</param>
            <param name="nummer">Werte</param>
            <returns>False wenn es schon ist, True wenn es ist</returns>
        </member>
        <member name="M:Modell.Natur.mutationSwapMitEinschrankung(System.Int32,System.String,System.Int32[])">
            <summary>
            swap 2 nicht Feste Werte, aber in den nuen Positionen, die Spalte 
            muss nicht diese wert als Feste haben (istSchonInSaule = false)
            </summary>
            <param name="i">Index Spalte</param>
            <param name="cr">Aktuelle Zeile</param>
            <param name="fitnessSaule">Fitness Spalte</param>
            <returns>Neue Zeile</returns>
        </member>
        <member name="M:Modell.Natur.mutationSwapOhneNeunFitness(System.String,System.Int32,System.Int32)">
            <summary>
            macht swap zwischen 2 Spalte mit weniger als 9 fitness
            </summary>
            <param name="cr">Aktuelle Zeile</param>
            <param name="pos">Index 1 wo Spalte fitness kleiner als 9</param>
            <param name="pos2">Index 2 wo Spalte fitness kleiner als 9</param>
            <returns>Neue Zeile</returns>
        </member>
        <member name="M:Modell.Natur.rekombination2(Modell.Sudoku,Modell.Sudoku)">
            <summary>
            uniform Crossover
            </summary>
            <param name="a">Eltern 1</param>
            <param name="b">Eltern 2</param>
            <returns>Neue Sudokus, kinder</returns>
        </member>
        <member name="M:Modell.Natur.rekombination1(Modell.Sudoku,Modell.Sudoku)">
            <summary>
            1-Punkt Crossover
            </summary>
            <param name="a">Eltern 1</param>
            <param name="b">Eltern 2</param>
            <returns>Neue Sudokus, kinder</returns>
        </member>
        <member name="T:Modell.Evolution">
            <summary>
            Haupt class hier haben wir die Definitionen fÜr den ganzen Program, wie die Population sich entwickeln
            und ändern
            </summary>
        </member>
        <member name="M:Modell.Evolution.#ctor(System.String)">
            <summary>
            Constructor des class, es initialisiert die verschidene Liste, die wir brauchen
            </summary>
            <param name="sud">String </param>
        </member>
        <member name="M:Modell.Evolution.updateParameters(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Mit diese Funktion kann die Benutzerschnittstelle alle Parameters des Evolutionäre Algorithmien
            aktualisieren (in laufzeit, was uns ein Dynamische entwicklung erlaubt)
            </summary>
            <param name="popSize">Gross der erste Population</param>
            <param name="elit">Anzahl Elites</param>
            <param name="maxGen">Maximal Generationen</param>
            <param name="maxPop">Maximal Anzahl Individuen in Population</param>
            <param name="mutChanc">Mutationwahrscheinlichkeit, wenn wir ein neues Kinder haben,
            kann es mutiert wird oder nein, es hängt von diesem Parameter</param>
            <param name="crossovChanc">Nach wir 2 Eltern von dem Populationhewählt haben, könenn wir Sie in
            neue Generation einfügen oder ein Crossover zu machen und Ihre Kinder einzufügen, es hängt von diesem Parameter </param>
            <param name="mutMet">0 -> Random swap
            1 -> Random Swap mit einschränkung
            2 -> Swap swischen Spalte mit Fitness kleiner als 9</param>
            <param name="mutRad">Wie viele Male machen wir ein Mutation</param>
            <param name="crossMet">0 -> 1-Punkt Crossover
            1 -> Uniform Crossover</param>
        </member>
        <member name="M:Modell.Evolution.updateRestart(System.Int32,System.Int32)">
            <summary>
            aktulisieren Parameters für restart
            </summary>
            <param name="met">0 ->Restart
            1 -> Nichts
            2 -> Mutation</param>
            <param name="tolleranz">Wie Viele Generationen ohne verbesserung es kann geben</param>
        </member>
        <member name="M:Modell.Evolution.restartInterface">
            <summary>
            abhängig restart Methode, mach die entsprechende Funktion
            </summary>
        </member>
        <member name="M:Modell.Evolution.mutationInterface(System.Int32,Modell.Sudoku)">
            <summary>
            abhängig des Mutation Methode, mach die entsprechende Funktion
            </summary>
            <param name="methode">0 -> Random swap
            1 -> Random Swap mit einschränkung
            2 -> Swap swischen Spalte mit Fitness kleiner als 9</param>
            <param name="s">Sudoku, das mutiert werden wird</param>
        </member>
        <member name="M:Modell.Evolution.crossoverInterface(System.Int32,System.Int32,System.Int32)">
            <summary>
            abhängig des Crossover Methode, mach die entsprechende Funktion
            </summary>
            <param name="methode">0 -> 1-Punkt Crossover
            1 -> Uniform Crossover</param>
            <param name="i">Index Eltern 1 in Population Liste</param>
            <param name="j">Index Eltern 2 in Population Liste</param>
            <returns></returns>
        </member>
        <member name="F:Modell.Evolution.aktuelFit">
            <summary>
            Fitness des besten Individuums in aktueller Generation
            </summary>
        </member>
        <member name="F:Modell.Evolution.besteFit">
            <summary>
            Fitness des besten Individuums in aller Generation
            </summary>
        </member>
        <member name="F:Modell.Evolution.generationenOhneVerbesserung">
            <summary>
            Wie Viele Generationen ohne verbesserung es geben kann
            </summary>
        </member>
        <member name="M:Modell.Evolution.start">
            <summary>
            Hier die erste Population erschafft wird und die Control Parameters initialisiert werden
            </summary>
        </member>
        <member name="M:Modell.Evolution.weiterGehenBisEnde">
            <summary>
            Mit diese Funktion kann die Benutzerschnittstelle machen, dass das Program bis ende weitergehen
            </summary>
            <returns>Beste Individuum, Fitness und Generaion Information in String Format</returns>
        </member>
        <member name="M:Modell.Evolution.weiterGehenNSchritte(System.Int32)">
            <summary>
            Mit diese Funktion kann die Benutzerschnittstelle machen, dass die Population "shritte" Male sich 
            entwickeln
            </summary>
            <param name="shritte">Generationen um weiterzugehen</param>
            <returns>Beste Individuum, Fitness und Generaion Information in String Format</returns>
        </member>
        <member name="M:Modell.Evolution.getBesteSudPop">
            <summary>
            das beste individuum kann in Population oder in Elites Liste sein, diese Funktion sucht, welche
            die Beste Fitness hat
            </summary>
            <returns>Beste Individuum, Fitness und Generaion Information in String Format</returns>
        </member>
        <member name="M:Modell.Evolution.shrittEvol">
            <summary>
            1 neue Generation entwickeln (hier ist das haupt Evolutionäre Methode,selektion, operatoren und fitness)
            </summary>
        </member>
        <member name="M:Modell.Evolution.printElites">
            <summary>
            Macht ein String mit die Sudokus in Fitness Array, diese sind die beste von jeder Versuch
            </summary>
            <returns>String representation die alle Elites</returns>
        </member>
        <member name="M:Modell.Evolution.printFitnesPop">
            <summary>
            Macht ein String mit dem Fitness von jedem Individuum in Population
            </summary>
            <returns></returns>
        </member>
        <member name="F:Modell.Evolution.fitnesGeneration">
            <summary>
            Liste mit beste Fitness jeder Generation
            </summary>
        </member>
        <member name="M:Modell.Evolution.printFitnessGenerationen">
            <summary>
            Macht ein String mit dem Fitness von jedem besten Individuum jeder Generation
            </summary>
            <returns></returns>
        </member>
        <member name="M:Modell.Evolution.schauFitness(Modell.Sudoku)">
            <summary>
            Macht ein String mit dem total Fitness, total chromosm Fitness, total sub matrix Fitness, fitness
            jeder Zeile unf fitness jedes Sub Matrix
            </summary>
            <param name="sud">Sudoku, dessen Fitness wir sehen möchten</param>
            <returns></returns>
        </member>
        <member name="M:Modell.Evolution.superMutation">
            <summary>
            Mutation viele individuen in Population (für lokales Maximum)
            </summary>
        </member>
        <member name="M:Modell.Evolution.restart(System.Int32)">
            <summary>
            abhängig fall erschafft es eine neue population oder benutzt die beste 
            individuen von andere Generationen
            </summary>
            <param name="fall">wie das restart machen</param>
        </member>
        <member name="M:Modell.Evolution.rechnenFitnessSudoku(Modell.Sudoku)">
            <summary>
            es rechnet die Fitness für ein Sudoku
            </summary>
            <param name="sudFit">Ein sudoku, um Fitness zu rechnen</param>
        </member>
        <member name="M:Modell.Evolution.serGrundSudStr(System.String)">
            <summary>
            es erschafft ein erste Sudoku mit der Eingabe von GUI
            </summary>
            <param name="sud">Sudoku wie ein String un 0s in Leere Positionen</param>
        </member>
        <member name="M:Modell.Evolution.einfugenInviduum(Modell.Sudoku,System.Collections.Generic.List{Modell.Sudoku})">
            <summary>
            ein neues Sudoku in ein Liste einfügen, abhängig Fitness
            </summary>
            <param name="sud">ein Sudoku</param>
            <param name="population">in Welcher Liste</param>
        </member>
        <member name="M:Modell.Evolution.erstePoblation(System.Int32)">
             <summary>
            diese habe ich aun verandert, weil ich habe bemerkt, dass es sinnlos ist alle random machen,
            wir wissen, dass es nur 9 nummer gibt, deshalb, die erste population musste nur das haben, und mutation
            und recombination muestte nur fue die Reihenfolge sein
             </summary>
             <param name="size">Gróss erste Population</param>
        </member>
        <member name="M:Modell.Evolution.mutationSwap(Modell.Sudoku)">
            <summary>
            sucht ein Random position zwischen 0 und 8, dann in
            diese Zeiele swap 2 nicht Feste Werte, und macht das nochmals, "mutation Radius" Male
            </summary>
            <param name="s">Sudokus, das mutiert wird</param>
        </member>
        <member name="M:Modell.Evolution.MutationSwapMitEinschrankung(Modell.Sudoku)">
            <summary>
            sucht ein Random position zwischen 0 und 8, dann in
            diese Zeile swap 2 nicht Feste Werte, aber in den nuen Positionen, die Spalte 
            muss nicht diese wert als Feste haben, und macht das nochmals, "mutation Radius" Male
            </summary>
            <param name="s">Sudokus, das mutiert wird</param>
        </member>
        <member name="M:Modell.Evolution.mutationSwapOhneNeunFitness(Modell.Sudoku)">
            <summary>
            es macht swap zwischen 2 saule mit weniger als 9 fitness
            </summary>
            <param name="su">Sudokus, das mutiert wird</param>
        </member>
        <member name="M:Modell.Evolution.einfachRekombination(System.Int32,System.Int32)">
            <summary>
            1-Punkt Crossover
            </summary>
            <param name="i">Index Eltern 1</param>
            <param name="j">Index Eltern 2</param>
            <returns>Liste mit 2 Neue Sudokus (Kinder)</returns>
        </member>
        <member name="M:Modell.Evolution.rekombinationVieleOrte(System.Int32,System.Int32)">
            <summary>
            Uniform Crossover
            </summary>
            <param name="i">Index Eltern 1</param>
            <param name="j">Index Eltern 2</param>
            <returns>Liste mit 2 Neue Sudokus (Kinder)</returns>
        </member>
        <member name="M:Modell.Evolution.selektionUpdate(System.Int32,System.Int32)">
            <summary>
            /// aktulisieren Parameters für Selektion
            </summary>
            <param name="selM">0 ->Turnierauswahl
            1 -> Glücksradauswahl</param>
            <param name="turnTeil">Teilnehmer in Turnier</param>
        </member>
        <member name="M:Modell.Evolution.selektionInterface">
            <summary>
            abhängig Selektion Methode, mach die entsprechende Funktion
            </summary>
            <returns></returns>
        </member>
        <member name="M:Modell.Evolution.selektionRekombination">
            <summary>
            es wähle 2 Eltern von Population, die erste ist ganz Random, die Zweite hängt von
            Selektion Methode
            </summary>
            <returns>Array mit die positionen von die Eltern in Population Liste</returns>
        </member>
    </members>
</doc>
